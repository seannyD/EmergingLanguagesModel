x==1
x = adist(reviewers,reviewers)
x[x==1]
which(x==1)
which(x==1,arr.ind=T)
for(i in 1:nrow(xx)){#
print(x[xx[i,1],xx[i,2]])#
}
x = adist(reviewers,reviewers)#
xx = which(x==1,arr.ind=T)#
#
for(i in 1:nrow(xx)){#
print(x[xx[i,1],xx[i,2]])#
}
xx[i,1]
print(names(x)[xx[i,1]],names(x)[xx[i,2]])
names(x)
print(reviewers[xx[i,1]],reviewers[xx[i,2]])
reviewers[xx[i,1]]
print(c(reviewers[xx[i,1]],reviewers[xx[i,2]]))
for(i in 1:nrow(xx)){#
print(c(reviewers[xx[i,1]],reviewers[xx[i,2]]))#
}
xx = which(x==2,arr.ind=T)#
#
for(i in 1:nrow(xx)){#
print(c(reviewers[xx[i,1]],reviewers[xx[i,2]]))#
}
x = adist(reviewers,reviewers)#
xx = which(x==3,arr.ind=T)#
#
for(i in 1:nrow(xx)){#
print(c(reviewers[xx[i,1]],reviewers[xx[i,2]]))#
}
x = adist(reviewers,reviewers)#
xx = which(x==4,arr.ind=T)#
#
for(i in 1:nrow(xx)){#
print(c(reviewers[xx[i,1]],reviewers[xx[i,2]]))#
}
x = adist(reviewers,reviewers)#
xx = which(x==5,arr.ind=T)#
#
for(i in 1:nrow(xx)){#
print(c(reviewers[xx[i,1]],reviewers[xx[i,2]]))#
}
d = read.delim("/Users/pplsuser/Documents/Conferences/Evolang11/Reviewers/review1.tab",stringsAsFactors=F)#
#
reviewers = unique(c(d$Reviewer.1,d$Reviewer.2,d$Reviewer.3))#
fp1 = tapply(d$format,d$Reviewer.1,function(X){sum(X=="FullPaper")})#
fp2 = tapply(d$format,d$Reviewer.2,function(X){sum(X=="FullPaper")})#
fp3 = tapply(d$format,d$Reviewer.3,function(X){sum(X=="FullPaper")})#
#
fp1[reviewers]+fp2[reviewers]+fp3[reviewers]#
x = adist(reviewers,reviewers)#
xx = which(x==1,arr.ind=T)#
#
for(i in 1:nrow(xx)){#
print(c(reviewers[xx[i,1]],reviewers[xx[i,2]]))#
}
xx
fp1
fp1[reviewers]+fp2[reviewers]+fp3[reviewers]
colSums(rbind(fp1[reviewers],fp2[reviewers],fp3[reviewers]),na.rm=T)
reviewers
fp1[reviewers]
d$Reviewer.1
fp
fp1
fp1['asdas']
colSums(rbind(fp1[reviewers],fp2[reviewers],fp3[reviewers]),na.rm=T)
rbind(fp1[reviewers],fp2[reviewers],fp3[reviewers])
d$format
d$format=='FullPaper'
d = read.delim("/Users/pplsuser/Documents/Conferences/Evolang11/Reviewers/review1.tab",stringsAsFactors=F)#
#
reviewers = unique(c(d$Reviewer.1,d$Reviewer.2,d$Reviewer.3))#
#
d2 = d#
d3 = d#
d2$Reviewer.1 = d$Reviewer.2#
d3$Reviewer.1 = d$Reviewer.3
d = rbind(d,d2,d3)
d
dim(d)
head(d)
head(d[,1:4])
head(d[,1:45)
head(d[,1:5])
head(d[,1:7])
head(d[,1:8])
head(d[,1:9])
d = read.delim("/Users/pplsuser/Documents/Conferences/Evolang11/Reviewers/review1.tab",stringsAsFactors=F)#
#
reviewers = unique(c(d$Reviewer.1,d$Reviewer.2,d$Reviewer.3))#
#
x = adist(reviewers,reviewers)#
xx = which(x==1,arr.ind=T)#
#
for(i in 1:nrow(xx)){#
print(c(reviewers[xx[i,1]],reviewers[xx[i,2]]))#
}#
d2 = d#
d3 = d#
d2$Reviewer.1 = d$Reviewer.2#
d3$Reviewer.1 = d$Reviewer.3#
d = rbind(d,d2,d3)#
d = d[d,1:9]
d = d[,1:9]
dim(d)
tapply(d$format,d$Reviewer.1,function(X){sum(X=='FullPaper')})
sort(tapply(d$format,d$Reviewer.1,function(X){sum(X=='FullPaper')}))
sort(tapply(d$format,d$Reviewer.1,function(X){sum(X=='FullPaper')}))['Bill Thompson']
sort(tapply(d$format,d$Reviewer.1,function(X){sum(X=='FullPaper')}))['Hope Morgan']
sort(tapply(d$format,d$Reviewer.1,function(X){sum(X=='FullPaper')}))
sort(tapply(d$format,d$Reviewer.1,function(X){sum(X=='FullPaper')/length(X)}))
hist(tapply(d$format,d$Reviewer.1,length))
d =d[nchar(d$Reviewer.1)>0,]
hist(tapply(d$format,d$Reviewer.1,length))
d = read.delim("/Users/pplsuser/Documents/Conferences/Evolang11/Reviewers/review0.tab",stringsAsFactors=F)#
d2 = d#
d3 = d#
d2$Reviewer.1 = d$Reviewer.2#
d3$Reviewer.1 = d$Reviewer.3#
d =d[nchar(d$Reviewer.1)>0,]#
hist(tapply(d$format,d$Reviewer.1,length))
sort(tapply(d$format,d$Reviewer.1,length))
hist(tapply(d$format,d$Reviewer.1,length),breaks=20)
d = read.delim("/Users/pplsuser/Documents/Conferences/Evolang11/Reviewers/review1.tab",stringsAsFactors=F)#
#
reviewers = unique(c(d$Reviewer.1,d$Reviewer.2,d$Reviewer.3))#
#
x = adist(reviewers,reviewers)#
xx = which(x==1,arr.ind=T)#
#
for(i in 1:nrow(xx)){#
print(c(reviewers[xx[i,1]],reviewers[xx[i,2]]))#
}#
d2 = d#
d3 = d#
d2$Reviewer.1 = d$Reviewer.2#
d3$Reviewer.1 = d$Reviewer.3#
d = rbind(d,d2,d3)#
d = d[,1:9]#
#
px = sort(tapply(d$format,d$Reviewer.1,function(X){sum(X=='FullPaper')}))#
#
sort(tapply(d$format,d$Reviewer.1,function(X){sum(X=='FullPaper')/length(X)}))#
#
d =d[nchar(d$Reviewer.1)>0,]#
#
hist(tapply(d$format,d$Reviewer.1,length),breaks=20)
r = read.delim("~/Documents/Conferences/Evolang11/Reviewers/ReviewAssignments.tab", sep='\t')
r
head(r)
r = read.delim("~/Documents/Conferences/Evolang11/Reviewers/ReviewAssignments.tab", sep='\t', row.names=F)
r$total
r$X.total
r$Num
r = read.delim("~/Documents/Conferences/Evolang11/Reviewers/ReviewAssignments.tab", sep='\t')#
r$Num = rownames(r)
r$Num
d = read.delim("~/Documents/Conferences/Evolang11/Reviewers/25OctrReviewStatus.tab", sep="\t")
head(d)
d = read.delim("~/Documents/Conferences/Evolang11/Reviewers/25OctrReviewStatus.tab", sep="\t", stringsAsFactors=F)
head(d)
sent.out = unique(d$Num)
sent.out
sent.out = tapply(d$Num,d$Num,length)
sent.out
sent.out[sent.out<3]
r = read.delim("~/Documents/Conferences/Evolang11/Reviewers/ReviewAssignments.tab", sep='\t')#
r$Num = rownames(r)#
#
r = r[r$Num!=1,]#
#
d = read.delim("~/Documents/Conferences/Evolang11/Reviewers/25OctrReviewStatus.tab", sep="\t", stringsAsFactors=F)#
#
d = d[d$Num!=1,]#
#
sent.out = tapply(d$Num,d$Num,length)#
#
names(sent.out[sent.out<3])
d$Num
d$Num = as.character(d$Num)
r[!r$Num %in% d$Num,]
r$Feter
r$Feher
as.character(r$Feher)_
as.character(r$Feher)
olga = r[r$Feher=="*,"]
olga
olga = r[r$Feher=="*",]
head(olga)
olga = read.delim("~/Documents/Conferences/Evolang11/Reviewers/FeherReviews.tab")
olga[,1]
head(olga)
olga[,1]
olga.nums = as.character(olga[,1])
olga.nums[!olga.nums %in% d$Num]
incomplete = names(sent.out[sent.out<3])
olga.nums[olga.nums %in% incomplete]
t(t(olga.nums[!olga.nums %in% d$Num]))
olga.to.send = olga.nums[!olga.nums %in% d$Num]
olga.to.send = olga.nums[!olga.nums %in% d$Num]#
for(i in olga.to.send){#
print(i)#
}
olga.incomplete = olga.nums[olga.nums %in% incomplete]
olga.incomplete
incomplete[olga.incomplete]
incomplete
sent.out[olga.incomplete]
olga.incomplete
head(d)
tapply(d$Subreviewer,d$Num,paste)
tapply(d$Subreviewer,d$Num,paste,collapse='; ')
d$Num
tapply(d[d$Num %in% olga.incomplete,]$Subreviewer,d[d$Num %in% olga.incomplete,]$Num,paste,collapse='; ')
olga.incomplete
olga.incomplete.details = tapply(d[d$Num %in% olga.incomplete,]$Subreviewer,d[d$Num %in% olga.incomplete,]$Num,paste,collapse='; ')
cbind(olga.incomplete,olga.incomplete.details[olga.incomplete])
dx = as.data.frame(ReviewNumber = olga.incomplete, ReviewersContactedSoFar = olga.incomplete.details[olga.incomplete]))
dx = as.data.frame(ReviewNumber = olga.incomplete, ReviewersContactedSoFar = olga.incomplete.details[olga.incomplete])
dx = data.frame(ReviewNumber = olga.incomplete, ReviewersContactedSoFar = olga.incomplete.details[olga.incomplete])
write.csv(dx,file="~/Documents/Conferences/Evolang11/Reviewers/OlgaPartlyDoneReviews.csv")
library(lme4)
library(languageR)
install.packages("languageR")
library(languageR)
predict.merMod
library(lme4)
cite(lme4)
cite('lme4')
?lme4
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', xlab='Proportion of signs')
n = 10#
#
sim = function(n){#
	d = rep(0,n)#
	count =0#
	while(d[0]==0){#
		d[sample(1:n,1)] = 1#
		count += 1#
	}#
	return(count)#
}#
#
replicate(100,sim)
n = 10#
#
sim = function(n){#
	d = rep(0,n)#
	count =0#
	while(d[0]==0){#
		d[sample(1:n,1)] = 1#
		count += 1#
	}#
	return(count)#
}#
#
replicate(100,sim(n))
d = rep(0,n)
count =0
d[0]==0
d[0]
d
n = 10#
#
sim = function(n){#
	d = rep(0,n)#
	count =0#
	while(d[1]==0){#
		d[sample(1:n,1)] = 1#
		count += 1#
	}#
	return(count)#
}#
#
replicate(100,sim(n))
d[1]==0
d[sample(1:n,1)] = 1
count += 1
n = 10#
#
sim = function(n){#
	d = rep(0,n)#
	count =0#
	while(d[1]==0){#
		d[sample(1:n,1)] = 1#
		count = count +1#
	}#
	return(count)#
}#
#
replicate(100,sim(n))
hist(replicate(100,sim(n)))
hist(replicate(100,sim(n)))
n = 10#
#
sim = function(n){#
	d = rep(0,n)#
	count =0#
	while(d[1]>=0){#
		d[sample(1:n,1)] = -1#
		count = count +1#
		birth = sample(1:n,1)#
		d[birth] = d[birth]+1#
	}#
	return(count)#
}#
#
hist(replicate(100,sim(n)))
n = 10#
#
sim = function(n){#
	d = rep(0,n)#
	count =0#
	while(d[1]>=0){#
		d[sample(1:n,1)] = -1#
		count = count +1#
		birth = sample(1:n,1)#
		d[birth] = d[birth]+1#
	}#
	return(list(count,birth)#
}#
#
hist(replicate(100,sim(n)))
n = 10#
#
sim = function(n){#
	d = rep(0,n)#
	count =0#
	while(d[1]>=0){#
		d[sample(1:n,1)] = -1#
		count = count +1#
		birth = sample(1:n,1)#
		d[birth] = d[birth]+1#
	}#
	return(c(count,birth)#
}#
#
hist(replicate(100,sim(n)))
n = 10#
#
sim = function(n){#
	d = rep(0,n)#
	count =0#
	while(d[1]>=0){#
		d[sample(1:n,1)] = -1#
		count = count +1#
		birth = sample(1:n,1)#
		d[birth] = d[birth]+1#
	}#
	return(c(count,birth))#
}#
#
hist(replicate(100,sim(n)))
res = replicate(100,sim(n))
res
n = 10#
#
sim = function(n){#
	d = rep(0,n)#
	count =0#
	while(d[1]>=0){#
		d[sample(1:n,1)] = -1#
		count = count +1#
		birth = sample(1:n,1)#
		d[birth] = d[birth]+1#
	}#
	return(c(count,d[1]))#
}#
#
res = replicate(100,sim(n))#
hist(res[1,],main='count')#
hist(res[2,],main='children')
n = 10#
#
sim = function(n){#
	d = rep(0,n)#
	count =0#
	while(d[1]>=0){#
		die = sample(1:n,1)#
		d[die] = -d[die]#
		count = count +1#
		birth = sample(1:n,1)#
		d[birth] = d[birth]+1#
	}#
	return(c(count,d[1]))#
}#
#
res = replicate(100,sim(n))#
hist(res[1,],main='count')#
hist(res[2,],main='children')
hist(-res[2,],main='children')
par(mfrow=c(1,2))#
hist(res[1,],main='count')#
hist(-res[2,],main='children')
plot(res[1,],-res[2,])
res = replicate(1000,sim(n))#
par(mfrow=c(1,2))#
hist(res[1,],main='count')#
hist(-res[2,],main='children')#
#
plot(res[1,],-res[2,])
n = 10#
births.deaths.per.cycle = 3#
#
sim = function(n){#
	d = rep(0,n)#
	count =0#
	while(d[1]>=0){#
		for(i in births.deaths.per.cycle){#
			die = sample(1:n,1)#
			d[die] = -d[die]#
			count = count +1#
			birth = sample(1:n,1)#
			d[birth] = d[birth]+1#
		}#
	}#
	return(c(count,d[1]))#
}#
#
res = replicate(1000,sim(n))#
par(mfrow=c(1,2))#
hist(res[1,],main='count')#
hist(-res[2,],main='children')#
#
plot(res[1,],-res[2,])
res
t(res)
res = data.frame()#
for(n in c(10,20,30,40,50)){#
	for(births.deaths.per.cycle in c(1,2,3,4,5)){#
		s = sim(n,births.deaths.per.cycle)#
		res = rbind(res,cbind(t(s),rep(n,ncol(s)),rep(births.deaths.per.cycle,ncol(s))))#
	}#
}#
#
names(res) = c("survive",'children','n','bd')
n = 10#
births.deaths.per.cycle = 3#
#
sim = function(n,births.deaths.per.cycle){#
	d = rep(0,n)#
	count =0#
	while(d[1]>=0){#
		for(i in births.deaths.per.cycle){#
			die = sample(1:n,1)#
			d[die] = -d[die]#
			count = count +1#
			birth = sample(1:n,1)#
			d[birth] = d[birth]+1#
		}#
	}#
	return(c(count,d[1]))#
}#
#
res = replicate(1000,sim(n))#
#
par(mfrow=c(1,2))#
hist(res[1,],main='count')#
hist(-res[2,],main='children')#
#
plot(res[1,],-res[2,])#
#
res = data.frame()#
for(n in c(10,20,30,40,50)){#
	for(births.deaths.per.cycle in c(1,2,3,4,5)){#
		s = sim(n,births.deaths.per.cycle)#
		res = rbind(res,cbind(t(s),rep(n,ncol(s)),rep(births.deaths.per.cycle,ncol(s))))#
	}#
}#
#
names(res) = c("survive",'children','n','bd')
s = sim(n,births.deaths.per.cycle)
ncol(s)
length(s)
ncol(s)
dim(s)
s
s = sim(n,births.deaths.per.cycle)
s = replicate(100,sim(n,births.deaths.per.cycle))
dim(s)
ncol(s)
n = 10#
births.deaths.per.cycle = 3#
#
sim = function(n,births.deaths.per.cycle){#
	d = rep(0,n)#
	count =0#
	while(d[1]>=0){#
		for(i in births.deaths.per.cycle){#
			die = sample(1:n,1)#
			d[die] = -d[die]#
			count = count +1#
			birth = sample(1:n,1)#
			d[birth] = d[birth]+1#
		}#
	}#
	return(c(count,d[1]))#
}#
#
res = replicate(1000,sim(10,1))#
#
par(mfrow=c(1,2))#
hist(res[1,],main='count')#
hist(-res[2,],main='children')#
#
plot(res[1,],-res[2,])#
#
res = data.frame()#
for(n in c(10,20,30,40,50)){#
	for(births.deaths.per.cycle in c(1,2,3,4,5)){#
		s = replicate(100,sim(n,births.deaths.per.cycle))#
		res = rbind(res,cbind(t(s),rep(n,ncol(s)),rep(births.deaths.per.cycle,ncol(s))))#
	}#
}#
#
names(res) = c("survive",'children','n','bd')
lm(children~ n * bd,data=res)
summary(lm(children~ n * bd,data=res))
m.children = lm(children~ n * bd,data=res)
m.children = lm(bd~ n * children,data=res)
predict(m.children, data.frame(n=2189, children=3))
plot(res$bd, res$n)
plot(res$bd, res$children)
barplot(res$bd, res$children)
head(res)
res$children = - res$children
barplot(res$bd~res$children)
res$children
boxplot(res$bd~res$children)
boxplot(res$bd~res$children)
boxplot(res$bd~res$children)
max(res$bd)
install.packages("gplots")
library(gplots)
plotmeans(res$bd~res$children)
plotmeans(res$children~res$bd)
for(nx in sort(unique(d$n))){#
	plotmeans(res[res$n==nx,]$children~res[res$n==nx,]$bd)#
	}
res[res$n==nx,]$children
nx = 10
res[res$n==nx,]$children
sort(unique(d$n))
for(nx in sort(unique(res$n))){#
	plotmeans(res[res$n==nx,]$children~res[res$n==nx,]$bd)#
	}
par(mfrow=c(3,4))#
for(nx in sort(unique(res$n))){#
	plotmeans(res[res$n==nx,]$children~res[res$n==nx,]$bd, main= nx)#
	}
n = 10#
births.deaths.per.cycle = 3#
#
sim = function(n,births.deaths.per.cycle){#
	d = rep(0,n)#
	count =0#
	while(d[1]>=0){#
		for(i in births.deaths.per.cycle){#
			die = sample(1:n,1)#
			d[die] = -d[die]#
			count = count +1#
			birth = sample(1:n,1)#
			d[birth] = d[birth]+1#
		}#
	}#
	return(c(count,d[1]))#
}#
#
res = replicate(1000,sim(10,1))#
#
par(mfrow=c(1,2))#
hist(res[1,],main='count')#
hist(-res[2,],main='children')#
#
plot(res[1,],-res[2,])#
#
res = data.frame()#
for(n in seq(10,2000,length.out=8)){#
	for(births.deaths.per.cycle in c(1,2,3,4,5)){#
		s = replicate(100,sim(n,births.deaths.per.cycle))#
		res = rbind(res,cbind(t(s),rep(n,ncol(s)),rep(births.deaths.per.cycle,ncol(s))))#
	}#
}#
#
names(res) = c("survive",'children','n','bd')#
res$children = - res$children#
#
par(mfrow=c(3,4))#
for(nx in sort(unique(res$n))){#
	plotmeans(res[res$n==nx,]$children~res[res$n==nx,]$bd, main= nx)#
	}#
#
m.children = lm(bd~ n * children,data=res)#
#
predict(m.children, data.frame(n=2189, children=3))
predict(m.children, data.frame(n=2189, children=4))
predict(m.children, data.frame(n=2189, children=2))
predict(m.children, data.frame(n=2189, children=1))
predict(m.children, data.frame(n=2189, children=4))
predict(m.children, data.frame(n=300, children=4))
library(gam)
install.packages("gam")
library(gam)
m.children = gam(bd~ n * children,data=res)
predict(m.children, data.frame(n=2189, children=3))
m.children = lm(bd~ n * children,data=res)
predict(m.children, data.frame(n=2189, children=3))
sample(c(0,1),c(0.05,0.95))
sample(c(0,1),100,prob=c(0.05,0.95))
sample(c(0,1),100,replace=T,prob=c(0.05,0.95))
sample(c(0,1),100,replace=T,prob=c(0.05,0.95))
sample(c(0,1),100,replace=T,prob=c(0.05,0.95))
sample(c(0,1),100,replace=T,prob=c(0.05,0.95))
sample(c(0,1),100,replace=T,prob=c(0.05,0.95))
sample(c(0,1),100,replace=T,prob=c(0.05,0.95))
mean(sample(c(0,1),1000,replace=T,prob=c(0.05,0.95)))
replicate(100,mean(c(sample(c(0,1),3,replace=T,prob=c(0.05,0.95))))
)
replicate(100,mean(c(sample(c(0,1),3,replace=T,prob=c(0.05,0.95)))))
mean(replicate(100,mean(c(sample(c(0,1),3,replace=T,prob=c(0.05,0.95))))))
mean(replicate(100,sum(c(sample(c(0,1),3,replace=T,prob=c(0.05,0.95))))))
mean(replicate(100,sum(c(sample(c(0,1),3,replace=T,prob=c(0.05,0.96))))))
mean(replicate(100,sum(c(sample(c(0,1),3,replace=T,prob=c(0.05,0.99))))))
mean(replicate(100,sum(c(sample(c(0,1),3,replace=T,prob=c(0.05,0.999))))))
mean(replicate(100,sum(c(sample(c(0,1),3,replace=T,prob=c(0.05,0.9999))))))
mean(replicate(100,sum(c(sample(c(0,1),3,replace=T,prob=c(0.01,0.99))))))
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', xlab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', xlab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', xlab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', xlab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', xlab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', xlab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', ylab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', ylab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', ylab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', ylab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', ylab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', ylab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', ylab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', ylab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', ylab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', ylab='Proportion of signs')
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', ylab='Proportion of signs')
(150 * 20)
(150 * 20)/60
setwd("~/Documents/MPI/EmergingLanguages/SignSpeechConnieBill/Model/analysis/")#
#
d = read.csv("../results/text.tab")#
#
names(d) = c("stage","id","deaf","signs","sounds")#
#
par(mfrow=c(2,2))#
#
plot(tapply(d$deaf,d$stage,sum),type='l',main="Number of Deaf People")#
signs_in_pop = tapply(d$signs,d$stage,mean)#
sounds_in_pop = tapply(d$sounds,d$stage,mean)#
#
plot(signs_in_pop,col=1,type='l', main='Signs used in pop', ylim=range(c(sounds_in_pop,signs_in_pop)))#
lines(sounds_in_pop,col=2)#
legend(1,max(c(signs_in_pop,sounds_in_pop)),legend=c("sign","sound"),col=1:2, lty=1)#
d$prop.signs = d$signs/(d$signs+d$sounds)#
d$prop.signs[is.nan(d$prop.signs)] = 0#
balance = tapply(d$prop.signs,d$stage,mean,na.rm=T)#
#
balance.hearing = tapply(d$prop.signs[d$deaf==0],d$stage[d$deaf==0],mean,na.rm=T)#
plot(balance.hearing,type='l', main='', ylab='Proportion of signs')
